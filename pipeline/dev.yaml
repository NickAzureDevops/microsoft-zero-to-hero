parameters:
  - name: apply
    displayName: Apply
    type: boolean
    default: true
  - name: destroy
    displayName: Destroy
    type: boolean
    default: false

trigger: none

variables:
  - name: backendAzureRmKey
    value: 'microsoft-zero-hero.tfstate'
  - name: workingDirectory
    value: "$(System.DefaultWorkingDirectory)/terraform/"
  - name: backendAzureRmResourceGroupName
    value: 'terraform-tfstate-rg'
  - name: backendAzureRmStorageAccountName
    value: 'terraformstate122024'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Deploy
    displayName: Deploy with Terraform
    jobs:
      - job: deploy
        displayName: Deploy with Terraform
        pool: 
          vmImage: ubuntu-latest 
        steps:
          - checkout: self
            displayName: Checkout Terraform Module
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: "${{ variables.workingDirectory }}"
              backendServiceArm: '${{ variables.serviceConnection }}'
              backendAzureRmResourceGroupName: "${{ variables.backendAzureRmResourceGroupName }}"
              backendAzureRmStorageAccountName: "${{ variables.backendAzureRmStorageAccountName }}"
              backendAzureRmContainerName: "${{ variables.backendAzureRmContainerName }}"
              backendAzureRmKey: "${{ variables.backendAzureRmKey }}"
            env:
              ARM_USE_AZUREAD: true 

          - task: TerraformTaskV4@4
            condition: eq('${{ parameters.destroy }}', 'true')
            displayName: Terraform Destroy
            name: terraformDestroy
            inputs:
              provider: "azurerm"
              command: "destroy"
              commandOptions: '-var="context=${{ parameters.context }}"'
              workingDirectory: "${{ variables.workingDirectory }}"
              environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
                  
          - task: TerraformTaskV4@4
            displayName: Terraform Plan
            # Run plan if apply is true, or if both apply and destroy are false
            condition: or(and(succeeded(), eq('${{ parameters.apply }}', 'true')), and(succeeded(), eq('${{ parameters.apply }}', 'false'), eq('${{ parameters.destroy }}', 'false')))
            name: terraformPlan
            inputs:
              provider: 'azurerm'
              command: "plan"
              commandOptions: '-var="context=${{ parameters.context }}" -out=$(Build.SourceBranchName).tfplan'
              workingDirectory: "${{ variables.workingDirectory }}"
              environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'

          - task: TerraformTaskV4@4
            displayName: Terraform Apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: $(Build.SourceBranchName).tfplan
              workingDirectory: "${{ variables.workingDirectory }}"
              environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
            env:
              ARM_USE_AZUREAD: true
